@inject NotificationService NotificationService
@inject DialogService dialogService

@if (SelectedCompatibilityApps != null && SelectedCompatibilityApps.Count > 0 && AppsViews.Count > 0)
{
    <h3>Application @ApplicationName in version @SelectedAppVersion?.Version uses</h3>
    <RadzenDataGrid Data="@SelectedCompatibilityApps" AllowVirtualization="true"
                    AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    TItem="ApplicationView"
                    AllowSorting="true" ColumnWidth="100px">
        <Columns>
            <RadzenDataGridColumn Property="@nameof(ApplicationView.Name)" Title="Name" MinWidth="120px" />
            <RadzenDataGridColumn Title="Version" MinWidth="120px">
                <Template Context="app">
                    @if (app.SelectedAppVersion != null)
                    {
                        @app.SelectedAppVersion.Version
                    }
                    else
                    {
                        <span>N/A</span>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="All Versions" MinWidth="300px">
                <Template Context="app">
                    @if (app.Versions != null && app.Versions.Any())
                    {
                        @if (app.Versions.Count > 0)
                        {
                            <TextWithButtons CurrentVersionId="app.SelectedAppVersion!.Id" VersionsData="app.Versions"
                                             OnProcessVersionEvent="OnProcessAllVersionsEvent" />
                        }
                    }
                    else
                    {
                        <span>No versions available</span>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Changelog" MinWidth="200px">
                <Template Context="app">
                    @if (app.SelectedAppVersion != null)
                    {
                        @app.SelectedAppVersion.Description
                    }
                    else
                    {
                        <span>N/A</span>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Last 10 changelogs" MinWidth="200px">
                <Template Context="app">
                    <RadzenButton Icon="list" ButtonStyle="ButtonStyle.Primary" Click="@(args => OnShowLastChangelogs(app))" />
                </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>
}
else if (SelectedAppVersion != null && !string.IsNullOrWhiteSpace(ApplicationName))
{
    <h3>Version @SelectedAppVersion?.Version of application @ApplicationName does not use any other version</h3>
}

@code {
    [Parameter]
    public EventCallback<VersionEvent> OnProcessVersionEvent { get; set; }

    [Parameter]
    public IList<ApplicationView> AppsViews { get; set; } = [];

    [Parameter]
    public string ApplicationName { get; set; } = "ERROR";

    [Parameter]
    public AppVersionDTO? SelectedAppVersion { get; set; }

    private IList<ApplicationView>? SelectedCompatibilityApps;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (SelectedAppVersion != null && AppsViews.Count > 0)
        {
            UpdateCompatibilityForVersion(SelectedAppVersion.Id);
        }
    }

    private async Task OnProcessAllVersionsEvent(VersionEvent versionEvent)
    {
        await OnProcessVersionEvent.InvokeAsync(versionEvent);
    }

    private void UpdateCompatibilityForVersion(int versionId)
    {
        if (SelectedAppVersion == null)
            return;

        var compatibilitiesForVersion = SelectedAppVersion.Compatibilities;
        SetSelectedCompatibilityApps(compatibilitiesForVersion);

        UpdateSelectedVersionsForCompatibleApps(compatibilitiesForVersion);
    }

    private void SetSelectedCompatibilityApps(List<AppCompatibilityDTO> appCompatibilities)
    {
        if (appCompatibilities == null || !appCompatibilities.Any())
        {
            SelectedCompatibilityApps?.Clear();
            return;
        }

        var compatibleAppVersionsIds = appCompatibilities.Select(f => f.CompatibleWithVersionId).ToList();
        SelectedCompatibilityApps = AppsViews.Where(x => x.Versions.Select(g => g.AppId).ToList().Contains(x.Id)).ToList();

        // order versions
        foreach (var item in SelectedCompatibilityApps)
        {
            item.Versions = item.Versions.OrderByDescending(x => x.Id).ToList();
        }
    }

    private void UpdateSelectedVersionsForCompatibleApps(List<AppCompatibilityDTO>
        compatibilities)
    {
        if (compatibilities == null || !compatibilities.Any())
            return;

        foreach (var app in SelectedCompatibilityApps ?? [])
        {
            var compatibility = compatibilities.FirstOrDefault(c =>
                app.Versions.Select(x => x.Id).ToList().Contains(c.CompatibleWithVersionId));
            if (compatibility != null)
            {
                app.SelectedAppVersion = app.Versions.FirstOrDefault(v => v.Id == compatibility.CompatibleWithVersionId);
            }
        }
    }

    private async Task OnShowLastChangelogs(ApplicationView applicationView)
    {
        await OnProcessVersionEvent.InvokeAsync(new VersionEvent()
            {
                AppId = applicationView.Id,
                VersionId = applicationView.SelectedAppVersion?.Id ?? -1,
                EventType = VersionEventType.SHOW_CHANGELOGS
            });
    }

    private void ErrorNotify(string? error)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Detail = error ?? "NO_ERROR_FIX_ME",
                Duration = 3000
            });
    }
}
