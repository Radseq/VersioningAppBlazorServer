@inject NotificationService NotificationService
@inject DialogService dialogService

@if (SelectedCompatibilityApps != null && SelectedCompatibilityApps.Count > 0 && AppsViews.Count > 0)
{
    <h3>Application @ApplicationName in version @SelectedAppVersion?.Version uses</h3>
    <RadzenDataGrid Data="@SelectedCompatibilityApps" AllowVirtualization="true"
                    AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    TItem="ApplicationView"
                    AllowSorting="true" RowClick="(arg)=>OnRowClick(arg)">
        <Columns>
            <RadzenDataGridColumn Property="@nameof(ApplicationView.Name)" Title="Name" />
            <RadzenDataGridColumn Title="Version">
                <Template Context="app">
                    @if (app.SelectedAppVersion != null)
                    {
                        @app.SelectedAppVersion.Version
                    }
                    else
                    {
                        <span>N/A</span>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="All Versions">
                <Template Context="app">
                    @if (app.Versions != null && app.Versions.Any())
                    {
                        @if (app.Versions.Count > 0)
                        {
                            <RadzenListBox @bind-Value="dataGrisAppVersionSelectedValue" Data="app.Versions"
                                           TextProperty="@nameof(AppVersionDTO.Version)"
                                           ValueProperty="@nameof(AppVersionDTO.Id)"
                                           Style="width: 100%; max-width: 200px; height: 100px"
                                           InputAttributes="@(new Dictionary<string,object>(){{ "aria-label", "select company" }})"
                                           Change="@(args => OnSelectVersionOfApp(app))" />
                        }
                    }
                    else
                    {
                        <span>No versions available</span>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Changelog">
                <Template Context="app">
                    @if (app.SelectedAppVersion != null)
                    {
                        @app.SelectedAppVersion.Description
                    }
                    else
                    {
                        <span>N/A</span>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ApplicationView" Context="ApplicationView"
                                  TextAlign="TextAlign.Center" Frozen="true" Filterable="false" Sortable="false"
                                  FrozenPosition="FrozenColumnPosition.Right" Title="Action" Width="80px">
                <Template Context="ApplicationView">
                    <RadzenButton Icon="delete" Click="@(args => DeleteCompatibility(ApplicationView))" @onclick:stopPropagation="true" />
                </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>
}
else if (SelectedAppVersion != null && !string.IsNullOrWhiteSpace(ApplicationName))
{
    <h3>Version @SelectedAppVersion?.Version of application @ApplicationName does not use any other version</h3>
}

@code {
    [Parameter]
    public EventCallback<KeyValuePair<int, int>> OnAppVersionClicked { get; set; }

    [Parameter]
    public EventCallback<KeyValuePair<int, int>> OnAppCompatibilityDelete { get; set; }

    [Parameter]
    public IList<ApplicationView> AppsViews { get; set; } = [];

    [Parameter]
    public string ApplicationName { get; set; } = "ERROR";

    [Parameter]
    public AppVersionDTO? SelectedAppVersion { get; set; }

    private int? dataGrisAppVersionSelectedValue;

    private IList<ApplicationView>? SelectedCompatibilityApps;

    private bool StopBubble = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (SelectedAppVersion != null && AppsViews.Count > 0)
            UpdateCompatibilityForVersion(SelectedAppVersion.Id);
    }

    private async Task DeleteCompatibility(ApplicationView deleteAppCompatibility)
    {
        if (deleteAppCompatibility.SelectedAppVersion == null || SelectedAppVersion == null)
        {
            ErrorNotify("Cannot remove compatibility");
            return;
        }

        var dialogResult = await dialogService.Confirm("Are you sure?", $"Removing compatibility with version {deleteAppCompatibility.SelectedAppVersion.Version} of the application {ApplicationName}", new ConfirmOptions()
            {
                OkButtonText = "Tak",
                CancelButtonText = "Nie",
                ShowClose = false
            });
        if (!dialogResult ?? false)
            return;

        await OnAppCompatibilityDelete.InvokeAsync(new KeyValuePair<int, int>(
            SelectedAppVersion.Id, deleteAppCompatibility.SelectedAppVersion.Id));

    }

    private async Task OnSelectVersionOfApp(ApplicationView app)
    {
        if (!dataGrisAppVersionSelectedValue.HasValue)
            return;

        StopBubble = true;

        if (app.SelectedAppVersion != null)
            await OnAppVersionClicked.InvokeAsync(new KeyValuePair<int, int>(app.Id, dataGrisAppVersionSelectedValue.Value));
    }

    private async Task OnRowClick(DataGridRowMouseEventArgs<ApplicationView> clickedApp)
    {
        if (StopBubble) // HAX Radzen and his stop propagation
        {
            StopBubble = false;
            return;
        }

        if (clickedApp?.Data == null || clickedApp.Data.SelectedAppVersion == null)
            return;

        await OnAppVersionClicked.InvokeAsync(new KeyValuePair<int, int>
           (clickedApp.Data.Id, clickedApp.Data.SelectedAppVersion.Id));
    }

    private void UpdateCompatibilityForVersion(int versionId)
    {
        if (SelectedAppVersion == null)
            return;

        var compatibilitiesForVersion = SelectedAppVersion.Compatibilities;
        SetSelectedCompatibilityApps(compatibilitiesForVersion);

        UpdateSelectedVersionsForCompatibleApps(compatibilitiesForVersion);
    }

    private void SetSelectedCompatibilityApps(List<AppCompatibilityDTO> appCompatibilities)
    {
        if (appCompatibilities == null || !appCompatibilities.Any())
        {
            SelectedCompatibilityApps?.Clear();
            dataGrisAppVersionSelectedValue = null;
            return;
        }

        var compatibleAppVersionsIds = appCompatibilities.Select(f => f.CompatibleWithVersionId).ToList();
        SelectedCompatibilityApps = AppsViews.Where(x => x.Versions.Select(g => g.AppId).ToList().Contains(x.Id)).ToList();
    }

    private void UpdateSelectedVersionsForCompatibleApps(List<AppCompatibilityDTO>
        compatibilities)
    {
        if (compatibilities == null || !compatibilities.Any())
            return;

        foreach (var app in SelectedCompatibilityApps ?? [])
        {
            var compatibility = compatibilities.FirstOrDefault(c =>
                app.Versions.Select(x => x.Id).ToList().Contains(c.CompatibleWithVersionId));
            if (compatibility != null)
            {
                app.SelectedAppVersion = app.Versions.FirstOrDefault(v => v.Id == compatibility.CompatibleWithVersionId);
            }
        }
    }

    private void ErrorNotify(string? error)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Detail = error ?? "NO_ERROR_FIX_ME",
                Duration = 3000
            });
    }
}
