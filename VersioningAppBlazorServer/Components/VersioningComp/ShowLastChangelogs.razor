@using System.Text.RegularExpressions

<RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween"
             Style="height: 100%; max-height: 100vh; overflow-y: auto;">
    @foreach (var item in Changelogs)
    {
        <RadzenCard>
            <RadzenLabel Text="@item.Version" />
            <div style="padding: 0.5rem;">
                @foreach (var line in SplitByKeywords(item.ChangelogText))
                {
                    <div style="margin-bottom: 0.5rem;">
                        @if (line.StartsWith("#feat"))
                        {
                            <span style="color: green; font-weight: bold;">@line</span>
                        }
                        else if (line.StartsWith("#refactor"))
                        {
                            <span style="color: orange; font-weight: bold;">@line</span>
                        }
                        else if (line.StartsWith("#fix"))
                        {
                            <span style="color: red; font-weight: bold;">@line</span>
                        }
                        else if (line.StartsWith("#build"))
                        {
                            <span style="color: blue; font-weight: bold;">@line</span>
                        }
                        else
                        {
                            <span>@line</span>
                        }
                    </div>
                }
            </div>
        </RadzenCard>
    }
</RadzenStack>

@code {
    [Parameter] public List<ViewChangelog> Changelogs { get; set; } = [];

    private List<string> SplitByKeywords(string input)
    {
        // Define the keywords to split by
        var keywords = new[] { "#feat", "#refactor", "#fix", "#build" };

        // Use regex to split the input string by keywords
        var pattern = $"({string.Join("|", keywords.Select(Regex.Escape))})";
        var parts = Regex.Split(input, pattern)
                         .Where(x => !string.IsNullOrWhiteSpace(x))
                         .ToList();

        // Combine the keyword with its corresponding description
        var result = new List<string>();
        for (int i = 0; i < parts.Count; i += 2)
        {
            if (i + 1 < parts.Count)
            {
                result.Add($"{parts[i]}{parts[i + 1]}");
            }
            else
            {
                result.Add(parts[i]);
            }
        }

        return result;
    }
}
