@page "/AppVersionsView"

@inject IVersioningService VersioningService
@inject NotificationService NotificationService
@inject DialogService dialogService

@rendermode InteractiveServer

<PageBody>
    <Body>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center"
                     JustifyContent="JustifyContent.Center" Gap="0.5rem" class="rz-p-md-4 rz-p-sm-2 rz-sm-4 rz-md-12">
            <RadzenLabel Text="Select Application" Component="DropDownSelectApp" />
            <RadzenDropDown @bind-Value=@selectedAppIdDummy Change="@(args => OnChangeApp(args))"
                            Data=@ApplicationNames
                            AllowFiltering="true"
                            TextProperty="@nameof(DropDownItem.Value)"
                            ValueProperty="@nameof(DropDownItem.Id)" Style="width: 100%; max-width: 400px;" Name="DropDownSelectApp" />

            @if (selectedApp != null)
            {
                <RadzenLabel Text="Select Version" Component="DropDownChangeVersion" />
                <RadzenDropDown @bind-Value=@selectedAppVersionId Change="@(args => OnChangeAppVersion(args))"
                                Data=@selectedApp?.Versions
                                TextProperty="@nameof(AppVersionDTO.Version)" ValueProperty="@nameof(AppVersionDTO.Id)"
                                Style="width: 100%; max-width: 400px;" Name="DropDownChangeVersion" />
            }
        </RadzenStack>
        <RadzenRow AlignItems="AlignItems.Center"
                   JustifyContent="JustifyContent.Center" Gap="0.5rem" class="rz-pb-md-4 rz-pb-sm-2">
            @if (selectedApp != null)
            {
                <RadzenColumn Size="12" SizeMD="12" SizeLG="6">
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">App description</RadzenText>
                        <RadzenTextArea @bind-Value=@selectedApp.Description Disabled Style="width: 100%" aria-label="application note here" />
                    </RadzenCard>
                </RadzenColumn>
            }
            @if (selectedAppVersion != null)
            {
                <RadzenColumn Size="12" SizeMD="12" SizeLG="6">
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Changelog of version</RadzenText>
                        <RadzenTextArea @bind-Value=@selectedAppVersion.Description
                                        Rows="@(selectedAppVersion.Description.Length > 300 ? 10 : 2)"
                                        Disabled Style="width: 100%;" aria-label="application version changelog here" />
                    </RadzenCard>
                </RadzenColumn>
            }
        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center"
                     JustifyContent="JustifyContent.Center" Gap="0.5rem" class="rz-pb-md-4 rz-pb-sm-2">
            @if (selectedApp != null)
            {
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Text="Delete application"
                              Variant="Variant.Flat" Click="()=>DeleteAppButtonClick(selectedApp.Id)" />
            }
            @if (selectedAppVersion != null)
            {
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Text="Delete selected version"
                              Variant="Variant.Flat" Click="()=>DeleteAppVersionButtonClick(selectedAppVersion.Id)" />
                <RadzenCheckBox @bind-Value=@IsProduction Name="IsProductionVersionCheckBox" TValue="bool"
                                Change="(arg)=>SetProductionVersion(arg)" />
                <RadzenCheckBox @bind-Value=@selectedAppVersion.IsProduction Name="IsProductionVersionCheckBox" TValue="bool" Change="(arg)=>SetProductionVersion(arg)" />
                <RadzenLabel Text="Is production version(old versions will set to false)"
                             Component="IsProductionVersionCheckBox" class="rz-ms-2" />
            }
        </RadzenStack>
        @if (selectedApp != null && selectedAppVersion != null)
        {
            <VersioningAppBlazorServer.Components.VersioningComp.ViewAppVersion ApplicationName="@selectedApp.Name"
                                                                                AppsViews=@CompatibleApplications
                                                                                SelectedAppVersion=@selectedAppVersion
                                                                                OnProcessVersionEvent="OnProcessVersionEvent" />
        }
        @if (selectedApp != null && selectedAppVersion != null && AppsUsingThisVersion.Count > 0)
        {
            <VersioningAppBlazorServer.Components.VersioningComp.OtherApssUseThisVersion ApplicationName="@selectedApp.Name"
                                                                                         AppsViews=@AppsUsingThisVersion
                                                                                         SelectedAppVersion=@selectedAppVersion
                                                                                         OnProcessVersionEvent="OnProcessVersionEvent" />
        }
    </Body>
</PageBody>

@code {
    private List<DropDownItem> ApplicationNames = [];

    private ApplicationDTO? selectedApp;
    private int? selectedAppIdDummy;

    private AppVersionDTO? selectedAppVersion;
    private int? selectedAppVersionId;

    private List<ApplicationView> CompatibleApplications { get; set; } = [];

    private List<ApplicationView> AppsUsingThisVersion { get; set; } = [];

    private bool IsProduction { get; set; } = false;

    private async Task SetProductionVersion(bool value)
    {
        if (selectedAppVersion != null)
        {
            IsProduction = selectedAppVersion.IsProduction;
        }

        var confirm = await ConfirmYesNo($"Are you sure you want to assign/remove the production flag for version " +
        $"{selectedAppVersion?.Version} of application {selectedApp?.Name}? The previous version with this flag set will be changed to false.");
        if (!confirm)
            return;

        if (selectedAppVersion != null)
            selectedAppVersion.IsProduction = value;

        var result = await VersioningService.SetVersionToProduction(selectedApp!.Id, selectedAppVersion!.Id, value);
        if (result.HasFailed)
            ErrorNotify(result.ErrorData?.Description);

        var app = await VersioningService.GetApplicationById(selectedApp!.Id);
        if (app.IsSuccess)
            selectedApp = app.Value;
    }

    private async Task OnChangeApp(object value)
    {
        if (value is int appId)
        {
            var app = await VersioningService.GetApplicationById(appId);
            if (app.IsSuccess)
                selectedApp = app.Value;
            else
                ErrorNotify(app.ErrorData?.Description);

            selectedAppVersionId = null;
            selectedAppVersion = null;
        }
    }

    private async Task OnChangeAppVersion(object value)
    {
        if (value is int versionId)
        {
            var version = await VersioningService.GetAppVersion(versionId);
            if (version.HasFailed)
                ErrorNotify(version.ErrorData?.Description);

            selectedAppVersion = version.Value;

            if (selectedAppVersion == null)
                return;

            selectedAppVersionId = versionId;

            IsProduction = selectedAppVersion.IsProduction;

            var compatibleApps = await VersioningService.GetCompatibilityApplications(versionId);
            if (compatibleApps.IsSuccess)
            {
                CompatibleApplications = new();
                CompatibleApplications.AddRange(compatibleApps.Value?.ToList().ConvertAll(Mappers.MapApplication_to_ApplicationView) ?? []);
            }
            else
                ErrorNotify(compatibleApps.ErrorData?.Description);

            var appsUsingThisVersion = await VersioningService.GetOtherAppsUsingThisVersion(versionId);
            if (appsUsingThisVersion.IsSuccess)
            {
                AppsUsingThisVersion = new();
                AppsUsingThisVersion.AddRange(appsUsingThisVersion.Value?.ToList().ConvertAll(Mappers.MapApplication_to_ApplicationView) ?? []);
            }
            else
                ErrorNotify(appsUsingThisVersion.ErrorData?.Description);
        }
    }

    private async Task OnProcessVersionEvent(VersionEvent versionEvent)
    {
        switch (versionEvent.EventType)
        {
            case VersionEventType.UPGRADE:
                await UpgradeApplicationVersionCompatibility(versionEvent.AppId, versionEvent.OldVersionId, versionEvent.VersionId);
                break;
            case VersionEventType.DOWNGRADE:
                await UpgradeApplicationVersionCompatibility(versionEvent.AppId, versionEvent.OldVersionId, versionEvent.VersionId, true);
                break;
            case VersionEventType.NAVIGATE:
                await OnAppVersionClicked(versionEvent.AppId, versionEvent.VersionId);
                break;
            case VersionEventType.DELETE_COMPATIBILITY:
                await OnAppCompatibilityDelete(selectedAppVersion!.Id, versionEvent.OldVersionId!.Value);
                break;
            case VersionEventType.SHOW_CHANGELOGS:
                await OnShowLastChangelogs(versionEvent.AppId, versionEvent.VersionId);
                break;
            default:
                ErrorNotify("Error while processing the click on the table.");
                break;
        }
    }

    private async Task UpgradeApplicationVersionCompatibility(int appId, int? oldVersionId,
        int? newVersionId, bool isDowngrade = false)
    {
        if (!oldVersionId.HasValue || !newVersionId.HasValue)
        {
            ErrorNotify("No old version or new version available for compatibility change.");
            return;
        }
        AppVersionDTO? newVersion = GetVersion(newVersionId.Value);
        AppVersionDTO? oldVersion = GetVersion(oldVersionId.Value);
        if (isDowngrade)
        {
            var confirm = await ConfirmYesNo($"Do you want downgrade compatibility version from {oldVersion!.Version}, to {newVersion!.Version}");
            if (!confirm)
                return;
        }
        else
        {
            var confirm = await ConfirmYesNo($"Do you want upgrade compatibility version from {oldVersion!.Version}, to {newVersion!.Version}");
            if (!confirm)
                return;
        }
        var result = await VersioningService.UpgradeApplicationVersionCompatibility(appId, oldVersionId!.Value, newVersionId!.Value);
        if (result.HasFailed)
            ErrorNotify(result.ErrorData?.Description);

        foreach (var item in selectedAppVersion?.Compatibilities ?? [])
        {
            if (item.CompatibleWithVersionId == oldVersionId!.Value)
            {
                item.CompatibleWithVersionId = newVersionId!.Value;
            }
        }

        var compatibleApps = await VersioningService.GetCompatibilityApplications(selectedAppVersionId!.Value);
        if (compatibleApps.IsSuccess)
            CompatibleApplications = compatibleApps.Value?.ToList().ConvertAll(Mappers.MapApplication_to_ApplicationView) ?? [];
        else
            ErrorNotify(compatibleApps.ErrorData?.Description);

        //StateHasChanged();
    }

    private async Task OnAppVersionClicked(int appId, int versionId)
    {
        var app = await VersioningService.GetApplicationById(appId);
        if (app.HasFailed)
        {
            ErrorNotify(app.ErrorData?.Description);
            StateHasChanged();
            return;
        }

        selectedApp = app.Value;
        selectedAppIdDummy = appId;

        var version = await VersioningService.GetAppVersion(versionId);
        if (version.HasFailed)
        {
            ErrorNotify(version.ErrorData?.Description);
            StateHasChanged();
            return;
        }
        selectedAppVersion = version.Value;
        if (selectedAppVersion != null)
        {
            selectedAppVersionId = selectedAppVersion.Id;

            var compatibleApps = await VersioningService.GetCompatibilityApplications(selectedAppVersion.Id);
            if (compatibleApps.IsSuccess)
            {
                CompatibleApplications = new();
                CompatibleApplications.AddRange(compatibleApps.Value?.ToList().ConvertAll(Mappers.MapApplication_to_ApplicationView) ?? []);
            }
            else
                ErrorNotify(compatibleApps.ErrorData?.Description);

            var appsUsingThisVersion = await VersioningService.GetOtherAppsUsingThisVersion(selectedAppVersion.Id);
            if (appsUsingThisVersion.IsSuccess)
            {
                AppsUsingThisVersion = new();
                AppsUsingThisVersion.AddRange(appsUsingThisVersion.Value?.ToList().ConvertAll(Mappers.MapApplication_to_ApplicationView) ?? []);
            }
            else
                ErrorNotify(appsUsingThisVersion.ErrorData?.Description);
        }
        //StateHasChanged();
    }

    private async Task OnAppCompatibilityDelete(int appId, int versionId)
    {
        var confirm = await ConfirmYesNo($"Removing compatibility with version {selectedAppVersion?.Version} of the application {selectedApp?.Name}.");
        if (!confirm)
            return;

        var deleteResult = await VersioningService.DeleteAppCompatibility(appId, versionId);
        if (deleteResult.HasFailed)
        {
            ErrorNotify(deleteResult.ErrorData?.Description);
            return;
        }

        var compatibleApps = await VersioningService.GetCompatibilityApplications(selectedAppVersion!.Id);
        if (compatibleApps.IsSuccess)
            CompatibleApplications = compatibleApps.Value?.ToList().ConvertAll(Mappers.MapApplication_to_ApplicationView) ?? [];
        else
        {
            ErrorNotify(compatibleApps.ErrorData?.Description);
        }

        StateHasChanged();
    }

    private async Task OnShowLastChangelogs(int appId, int versionId)
    {
        var changelogs = await VersioningService.LoadLastChangelogs(appId, versionId);
        if (changelogs.HasFailed)
        {
            ErrorNotify(changelogs.ErrorData?.Description);
            return;
        }

        await dialogService.OpenSideAsync<VersioningComp.ShowLastChangelogs>("Last Changelogs",
            new Dictionary<string, object>() { { "ChangeLogs", changelogs.Value ?? [] } },
            options: new SideDialogOptions { CloseDialogOnOverlayClick = true, Position = DialogPosition.Right, ShowMask = true });
    }

    private async Task DeleteAppVersionButtonClick(int appVersionId)
    {
        var confirm = await ConfirmYesNo($"Removing version {selectedAppVersion?.Version} of the application {selectedApp?.Name}");
        if (!confirm)
            return;

        var deleteResult = await VersioningService.DeleteApplicationVersion(appVersionId);
        if (deleteResult.IsSuccess)
        {
            selectedAppVersionId = null;
            selectedAppVersion = null;
            if (selectedApp != null && selectedApp.Versions.Count > 0)
            {
                selectedApp.Versions = selectedApp.Versions.Where(x => x.Id != appVersionId).ToList();
            }
            CompatibleApplications = [];

            StateHasChanged();
        }
        else
        {
            ErrorNotify(deleteResult.ErrorData?.Description);
        }
    }

    private async Task DeleteAppButtonClick(int appId)
    {
        var confirm = await ConfirmYesNo($"Removing the application {selectedApp?.Name}, along with all versions");
        if (!confirm)
            return;

        var deleteResult = await VersioningService.DeleteApplication(appId);
        if (deleteResult.IsSuccess)
        {
            selectedApp = null;
            selectedAppIdDummy = null;

            selectedAppVersionId = null;
            selectedAppVersion = null;
            CompatibleApplications = [];

            var applicationNames = await VersioningService.GetAllApplicationsNames();
            if (applicationNames.IsSuccess)
                ApplicationNames = applicationNames.Value ?? [];

            StateHasChanged();
        }
        else
        {
            ErrorNotify(deleteResult.ErrorData?.Description);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var applicationNames = await VersioningService.GetAllApplicationsNames();
        if (applicationNames.IsSuccess)
            ApplicationNames = applicationNames.Value ?? [];
        else
            ErrorNotify(applicationNames.ErrorData?.Description);

        await base.OnInitializedAsync();
    }

    private AppVersionDTO? GetVersion(int versionId)
    {
        foreach (var item in CompatibleApplications)
        {
            var version = item.Versions.FirstOrDefault(x => x.Id == versionId);
            if (version != null)
                return version;
        }
        return null;
    }

    private void ErrorNotify(string? error)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Detail = error ?? "NO_ERROR_FIX_ME",
                Duration = 3000
            });
    }

    private async Task<bool> ConfirmYesNo(string text)
    {
        var dialogResult = await dialogService.Confirm(text, "Are you sure?", new ConfirmOptions()
            {
                OkButtonText = "Yes",
                CancelButtonText = "No",
                ShowClose = false
            });
        if (!dialogResult ?? false)
            return false;
        return true;
    }
}
