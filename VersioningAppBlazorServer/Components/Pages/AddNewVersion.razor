@page "/NewApplicationVersion"
@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject IVersioningService VersioningService
@inject NotificationService NotificationService

<PageBody>
    <Body>
        <RadzenStack Orientation="Orientation.Vertical"
                     JustifyContent="JustifyContent.Normal" Gap="0.5rem" class="">

            <h3>Add Version</h3>

            <RadzenLabel Text="Select Application" Component="DropDownSelectApp" />
            <RadzenDropDown @bind-Value=@selectedAppIdDummy Change="@(args => OnChangeApp(args))"
                            Data=@ApplicationNames
                            AllowFiltering="true"
                            TextProperty="@nameof(DropDownItem.Value)"
                            ValueProperty="@nameof(DropDownItem.Id)" Style="width: 100%; max-width: 400px;" Name="DropDownSelectApp" />

            @if (selectedAppIdDummy != null)
            {
                @if (selectedApp != null && selectedApp.Versions.Count > 0)
                {
                    <RadzenRow class="rz-py-2">
                        <RadzenLabel Text="List of Existing Versions" />
                        <RadzenListBox Disabled
                                       Data="selectedApp.Versions"
                                       TValue="int"
                                       TextProperty="@nameof(AppVersionDTO.Version)"
                                       ValueProperty="@nameof(AppVersionDTO.Id)"
                                       Style="width: 100%; max-width: 200px; height: 100px"
                                       InputAttributes="@(new Dictionary<string,object>(){{ "aria-label", "select company" }})" />
                    </RadzenRow>
                }

                <VersioningAppBlazorServer.Components.VersioningComp.NewVersion Applications="Applications"
                                                                                MinMajor="MinMajor"
                                                                                MinMinor="MinMinor"
                                                                                MinPatch="MinPatch"
                                                                                @key=selectedApp?.Id
                                                                                @ref=NewVersionComp />

                @if (selectedApp != null)
                {
                    <RadzenColumn>
                        <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Add" Variant="Variant.Flat" Click="@AddButtonClick" />
                    </RadzenColumn>
                }
            }
        </RadzenStack>
    </Body>
</PageBody>

@code {
    VersioningAppBlazorServer.Components.VersioningComp.NewVersion? NewVersionComp { get; set; }

    private List<DropDownItem> ApplicationNames = [];
    private List<ApplicationDTO> Applications { get; set; } = [];
    //private List<ApplicationDTO> ApplicationsLoaded { get; set; } = [];

    private ApplicationDTO? selectedApp;
    private int? selectedAppIdDummy;

    private int MinMajor { get; set; } = 1;
    private int MinMinor { get; set; } = 0;
    private int MinPatch { get; set; } = 0;

    private async Task OnChangeApp(object value)
    {
        if (value is int appId)
        {
            var app = await VersioningService.GetApplicationById(appId);
            if (app.IsSuccess)
                selectedApp = app.Value;
            else
            {
                ErrorNotify(app.ErrorData?.Description);
                return;
            }

            selectedApp!.Versions = selectedApp.Versions.OrderByDescending(x => x.Major)
                .ThenByDescending(g => g.Minor).ThenByDescending(r => r.Patch).ToList();

            var apps = await VersioningService.GetAllApplications();
            if (apps.IsSuccess)
                Applications = apps.Value?.ToList() ?? [];
            else
                ErrorNotify(apps.ErrorData?.Description);

            Applications = Applications.Where(x => x.Id != selectedApp.Id && x.Versions.Count > 0)
                .ToList().ConvertAll(Copies.Copy);

            MinMajor = selectedApp?.Versions.FirstOrDefault()?.Major ?? 1;
            MinMinor = selectedApp?.Versions.FirstOrDefault()?.Minor ?? 0;
            MinPatch = selectedApp?.Versions.FirstOrDefault()?.Patch + 1 ?? 0;

            StateHasChanged();
        }
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        try
        {
            var NewAppVersion = NewVersionComp?.GetVersionDTO();
            if (NewAppVersion != null && selectedApp != null)
            {
                NewAppVersion.AppId = selectedApp.Id;
            }

            if (string.IsNullOrWhiteSpace(NewAppVersion?.Description))
            {
                ErrorNotify("Include changelog");
                return;
            }

            var newVersionResult = await VersioningService.AddNewVersion(NewAppVersion);
            if (newVersionResult.IsSuccess)
            {
                Navigation.NavigateTo($"AppVersionView/{NewAppVersion.AppId}/{newVersionResult.Value}");
            }
            else
            {
                ErrorNotify(newVersionResult.ErrorData?.Description);
                NewAppVersion = new();
                selectedApp = null;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var allAppsNamesResult = await VersioningService.GetAllApplicationsNames();
        if (allAppsNamesResult.IsSuccess)
            ApplicationNames = allAppsNamesResult.Value ?? [];
        else
            ErrorNotify(allAppsNamesResult.ErrorData?.Description);

        await base.OnInitializedAsync();
    }

    private void ErrorNotify(string? error)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Detail = error ?? "NO_ERROR_FIX_ME",
                Duration = 3000
            });
    }
}