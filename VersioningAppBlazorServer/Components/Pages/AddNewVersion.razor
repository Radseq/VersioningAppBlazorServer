@page "/NewApplicationVersion"
@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject IVersioningService VersioningService
@inject NotificationService NotificationService

<PageBody>
    <Body>
        <RadzenStack Orientation="Orientation.Vertical"
                     JustifyContent="JustifyContent.Normal" Gap="0.5rem" class="">

            <h3>Add Version</h3>

            <RadzenLabel Text="Select Application" Component="DropDownSelectApp" />
            <RadzenDropDown @bind-Value=@selectedAppIdDummy Change="@(args => OnChangeApp(args))"
                            Data=@ApplicationNames
                            AllowFiltering="true"
                            TextProperty="@nameof(DropDownItem.Value)"
                            ValueProperty="@nameof(DropDownItem.Id)" Style="width: 100%; max-width: 400px;" Name="DropDownSelectApp" />


            @if (selectedApp != null && selectedApp.Versions.Count > 0)
            {
                <RadzenRow class="rz-py-2">
                    <RadzenLabel Text="List of Existing Versions" />
                    <RadzenListBox Disabled
                                   Data="selectedApp.Versions"
                                   TValue="int"
                                   TextProperty="@nameof(AppVersionDTO.Version)"
                                   ValueProperty="@nameof(AppVersionDTO.Id)"
                                   Style="width: 100%; max-width: 200px; height: 100px"
                                   InputAttributes="@(new Dictionary<string,object>(){{ "aria-label", "select company" }})" />
                </RadzenRow>
            }

            <VersioningAppBlazorServer.Components.VersioningComp.VersionNumeric MajorMin="MinMajor"
                                                                                MinorMin="MinMinor"
                                                                                PatchMin="MinPatch"
                                                                                OnNumericMajorSet="@HandleMajorVersionChange"
                                                                                OnNumericMinorSet="@HandleMinorVersionChange"
                                                                                OnNumericPatchSet="@HandlePatchVersionChange"
                                                                                @key="@NewAppVersion.AppId" />

            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="12" SizeLG="5">
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Give changelog</RadzenText>
                        <RadzenTextArea @bind-Value=@NewAppVersion.Description @oninput="@(args => NewAppVersion.Description = $"{args.Value}")" MaxLength="@maxLength" Style="width: 100%" aria-label="changelog here" />
                        <span style="font-style: italic;">@($"{NewAppVersion.Description.Length}/{maxLength}")</span>
                    </RadzenCard>
                </RadzenColumn>
            </RadzenRow>

            <VersioningAppBlazorServer.Components.VersioningComp.AppsToPick ApplicationsToPickUp="@ApplicationsToPickUp"
                                                                            OnSelectAppToPickUp="(args)=>OnSelectAppToPickUp(args.Application, args.VersionId)" />
            <VersioningAppBlazorServer.Components.VersioningComp.AppsPicked ApplicationsPicked="@ApplicationsPicked"
                                                                            OnDeleteAppPicked="@OnDeleteAppPicked" />

            @if (selectedApp != null)
            {
                <RadzenColumn>
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Add" Variant="Variant.Flat" Click="@AddButtonClick" />
                </RadzenColumn>
            }
        </RadzenStack>
    </Body>
</PageBody>

@code {
    private List<DropDownItem> ApplicationNames = [];
    private IList<ApplicationDTO> Applications { get; set; } = [];


    private ApplicationDTO? selectedApp;
    private int? selectedAppIdDummy;

    private const int maxLength = 2000;

    private AppVersionDTO NewAppVersion { get; set; } = new();

    public IList<ApplicationDTO> ApplicationsToPickUp { get; set; } = [];

    public IList<ApplicationPicked> ApplicationsPicked { get; set; } = [];

    private int MinMajor { get; set; } = 1;
    private int MinMinor { get; set; } = 0;
    private int MinPatch { get; set; } = 0;

    private void OnSelectAppToPickUp(ApplicationDTO app, int versionId)
    {
        ApplicationsToPickUp.Remove(app);

        var appVersion = app.Versions.FirstOrDefault(x => x.Id == versionId);
        if (appVersion != null)
            ApplicationsPicked.Add(Copies.Copy(app, appVersion));

        StateHasChanged();
    }

    private void OnDeleteAppPicked(ApplicationPicked appPicked)
    {
        ApplicationsPicked.Remove(appPicked);

        var app = Applications.FirstOrDefault(x => x.Id == appPicked.Id);
        if (app != null)
            ApplicationsToPickUp.Add(Copies.Copy(app));

        SortApplicationsToPickUp();

        StateHasChanged();
    }

    private async Task OnChangeApp(object value)
    {
        if (value is int appId)
        {
            var app = await VersioningService.GetApplicationById(appId);
            if (app.IsSuccess)
                selectedApp = app.Value;
            else
            {
                ErrorNotify(app.ErrorData?.Description);
                return;
            }

            selectedApp!.Versions = selectedApp.Versions.OrderByDescending(x => x.Major)
                .ThenByDescending(g => g.Minor).ThenByDescending(r => r.Patch).ToList();

            ApplicationsToPickUp = Applications.Where(x => x.Id != selectedApp.Id && x.Versions.Count > 0)
                .ToList().ConvertAll(Copies.Copy);
            SortApplicationsToPickUp();

            NewAppVersion = new AppVersionDTO()
                {
                    AppId = selectedApp.Id,
                    Major = selectedApp?.Versions.FirstOrDefault()?.Major ?? 1,
                    Minor = selectedApp?.Versions.FirstOrDefault()?.Minor ?? 0,
                    Patch = selectedApp?.Versions.FirstOrDefault()?.Patch + 1 ?? 0
                };

            MinMajor = NewAppVersion.Major;
            MinMinor = NewAppVersion.Minor;
            MinPatch = NewAppVersion.Patch;

            StateHasChanged();
        }
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        try
        {
            foreach (var item in ApplicationsPicked)
            {
                NewAppVersion.Compatibilities.Add(new AppCompatibilityDTO()
                    {
                        CompatibleWithVersionId = item.Version.Id,

                    });
            }
            ApplicationsToPickUp = Applications.Where(x => x.Id != selectedApp?.Id && x.Versions.Count > 0)
                .ToList().ConvertAll(Copies.Copy);
            SortApplicationsToPickUp();

            ApplicationsPicked.Clear();

            if (string.IsNullOrWhiteSpace(NewAppVersion.Description))
            {
                ErrorNotify("Include changelog");
                return;
            }

            var newVersionResult = await VersioningService.AddNewVersion(NewAppVersion, NewAppVersion.Compatibilities);
            if (newVersionResult.IsSuccess)
            {
                Navigation.NavigateTo($"AppVersionView/{NewAppVersion.AppId}/{newVersionResult.Value}");
            }
            else
            {
                ErrorNotify(newVersionResult.ErrorData?.Description);
                NewAppVersion = new();
                selectedApp = null;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void SortApplicationsToPickUp()
    {
        foreach (var item in ApplicationsToPickUp)
        {
            item.Versions = item.Versions.OrderByDescending(x => x.Major).ThenByDescending(g => g.Minor).ThenByDescending(r => r.Patch).ToList();
        }
    }

    private void HandleMajorVersionChange(int major)
    {
        NewAppVersion.Major = major;
    }

    private void HandleMinorVersionChange(int minor)
    {
        NewAppVersion.Minor = minor;
    }

    private void HandlePatchVersionChange(int patch)
    {
        NewAppVersion.Patch = patch;
    }

    protected override async Task OnInitializedAsync()
    {
        var allAppsNamesResult = await VersioningService.GetAllApplicationsNames();
        if (allAppsNamesResult.IsSuccess)
            ApplicationNames = allAppsNamesResult.Value ?? [];
        else
            ErrorNotify(allAppsNamesResult.ErrorData?.Description);

        var apps = await VersioningService.GetAllApplications();
        if (apps.IsSuccess)
            Applications = apps.Value ?? [];
        else
            ErrorNotify(apps.ErrorData?.Description);

        NewAppVersion = new AppVersionDTO()
            {
                Major = 1,
                Minor = 0,
                Patch = 0
            };

        await base.OnInitializedAsync();
    }

    private void ErrorNotify(string? error)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Detail = error ?? "NO_ERROR_FIX_ME",
                Duration = 3000
            });
    }
}