@page "/AppsList"

@inject IVersioningService VersioningService
@inject NotificationService NotificationService
@inject DialogService dialogService
@inject NavigationManager Navigation

@rendermode InteractiveServer

<PageBody>
    <Body>
        @if (Applications?.Count() > 0)
        {
            <RadzenRow>
                <RadzenColumn Size="12">
                    <RadzenDataGrid Data="@Applications" AllowVirtualization="true"
                                    AllowAlternatingRows="false"
                                    AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    LogicalFilterOperator="LogicalFilterOperator.Or"
                                    TItem="AppWithLastAndProductVersion"
                                    AllowSorting="true" ColumnWidth="100px" RowRender="OnRowRender">
                        <Columns>
                            <RadzenDataGridColumn Property="@nameof(AppWithLastAndProductVersion.Name)" Title="Name" MinWidth="170px">
                                <Template Context="AppWithLastAndProductVersion">
                                    @AppWithLastAndProductVersion.Name
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Property="@nameof(AppWithLastAndProductVersion.Description)" Title="Description" MinWidth="170px">
                                <Template Context="AppWithLastAndProductVersion">
                                    @AppWithLastAndProductVersion.Description
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Title="Last Version" MinWidth="170px">
                                <Template Context="app">
                                    @if (app.LastVersion != null)
                                    {
                                        <RadzenButton Text="@app.LastVersion.Version" Click="@(() => NavigateToVersion(app.LastVersion!))" />
                                    }
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn Title="Production Version" MinWidth="170px">
                                <Template Context="app">
                                    @if (app.ProductionVersion != null)
                                    {
                                        <RadzenButton Text="@app.ProductionVersion.Version" Click="@(() => NavigateToVersion(app.ProductionVersion))" />
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </RadzenColumn>
            </RadzenRow>
        }
    </Body>
</PageBody>

@code {
    private List<AppWithLastAndProductVersion>? Applications { get; set; } = null;

    private int rowIndexToBgColor { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        var applications = await VersioningService.GetAllApplications();
        if (applications.IsSuccess)
        {
            var orderedAppsByName = applications.Value?.OrderBy(x => x.Name).ToList().ConvertAll(Copies.Copy);
            Applications = new List<AppWithLastAndProductVersion>();
            foreach (var item in orderedAppsByName ?? [])
            {
                var lastVersion = item.Versions.OrderByDescending(x => x.Id).ElementAtOrDefault(0); // lastordefault seems have bug when browser back to this page
                var prodVersion = item.Versions.FirstOrDefault(x => x.IsProduction == true);

                Applications.Add(new AppWithLastAndProductVersion()
                    {
                        LastVersion = lastVersion,
                        ProductionVersion = prodVersion,
                        Description = item.Description,
                        Id = item.Id,
                        Name = item.Name,
                        Versions = item.Versions
                    });
            }
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Detail = applications.ErrorData?.Description ?? "Unknown error",
                    Duration = 5000
                });
        }
        await base.OnInitializedAsync();
    }

    void OnRowRender(RowRenderEventArgs<AppWithLastAndProductVersion> args)
    {
        if (args.Data.ProductionVersion != null && args.Data.LastVersion?.Id != args.Data.ProductionVersion?.Id)
        {
            ++rowIndexToBgColor;
            if (rowIndexToBgColor % 2 == 0)
            {
                args.Attributes.Add("style", $"background-color: var(--rz-danger-lighter);");
            }
            else
                args.Attributes.Add("style", $"background-color: #e7a5a5");
        }
    }

    private void NavigateToVersion(AppVersionDTO versionDto)
    {
        Navigation.NavigateTo($"AppVersionView/{versionDto.AppId}/{versionDto.Id}");
    }
}