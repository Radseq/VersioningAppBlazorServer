@page "/AppVersionView/{AppId:int}/{AppVersionId:int}"

@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject IVersioningService VersioningService
@inject NotificationService NotificationService

<PageBody>
    <Body>
        @if (selectedApp != null && selectedAppVersion != null)
        {
            <VersioningAppBlazorServer.Components.VersioningComp.ViewAppVersion ApplicationName="@selectedApp.Name"
                                                                    AppsViews=@CompatibleApplications
                                                                    SelectedAppVersion=@selectedAppVersion
                                                                    OnAppVersionClicked="@OnAppVersionClicked"
                                                                    OnAppCompatibilityDelete="@OnAppCompatibilityDelete" />
        }
    </Body>
</PageBody>

@code {
    [Parameter]
    public int AppId { get; set; }
    [Parameter]
    public int AppVersionId { get; set; }

    public IList<ApplicationView> CompatibleApplications { get; set; } = [];

    private ApplicationDTO? selectedApp;
    private AppVersionDTO? selectedAppVersion;

    private void OnAppVersionClicked(KeyValuePair<int, int> appWithVersion)
    {
        Navigation.NavigateTo($"AppVersionView/{appWithVersion.Key}/{appWithVersion.Value}");
    }

    private async Task OnAppCompatibilityDelete(KeyValuePair<int, int> appVersionIdWithToDeleteVersionId)
    {
        var deleteResult = await VersioningService.DeleteAppCompatibility(appVersionIdWithToDeleteVersionId.Key, appVersionIdWithToDeleteVersionId.Value);
        if (deleteResult.HasFailed)
            ErrorNotify(deleteResult.ErrorData?.Description);

        var compatibleApps = await VersioningService.GetCompatibilityApplications(appVersionIdWithToDeleteVersionId.Key);
        if (compatibleApps.IsSuccess)
            CompatibleApplications = compatibleApps.Value?.ToList().ConvertAll(Mappers.MapApplication_to_ApplicationView) ?? [];
        else
            ErrorNotify(compatibleApps.ErrorData?.Description);

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var app = await VersioningService.GetApplicationById(AppId);
        if (app.IsSuccess)
            selectedApp = app.Value;
        else
            ErrorNotify(app.ErrorData?.Description);

        var version = await VersioningService.GetAppVersion(AppVersionId);
        if (version.IsSuccess)
            selectedAppVersion = version.Value;
        else
            ErrorNotify(version.ErrorData?.Description);

        var compatibleApps = await VersioningService.GetCompatibilityApplications(AppVersionId);
        if (compatibleApps.IsSuccess)
            CompatibleApplications = compatibleApps.Value?.ToList().ConvertAll(Mappers.MapApplication_to_ApplicationView) ?? [];
        else
            ErrorNotify(compatibleApps.ErrorData?.Description);

        await base.OnInitializedAsync();
    }

    private void ErrorNotify(string? error)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Detail = error ?? "NO_ERROR_FIX_ME",
                Duration = 3000
            });
    }
}
