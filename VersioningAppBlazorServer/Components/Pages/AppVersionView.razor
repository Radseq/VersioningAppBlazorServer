@page "/AppVersionView/{AppId:int}/{AppVersionId:int}"

@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject IVersioningService VersioningService
@inject NotificationService NotificationService
@inject DialogService dialogService

<PageBody>
    <Body>
        <VersioningAppBlazorServer.Components.VersioningComp.BaseViewAppWithVersion AppId="AppId" AppVersionId="AppVersionId"
                                                                                    DeleteApp="DeleteAppButtonClick" DeleteAppVersion="DeleteAppVersionButtonClick" />
    </Body>
</PageBody>

@code {
    [Parameter]
    public int AppId { get; set; }
    [Parameter]
    public int AppVersionId { get; set; }

    private async Task DeleteAppButtonClick(ApplicationDTO app)
    {
        var confirm = await ConfirmYesNo($"Removing the application {app.Name}, along with all versions");
        if (!confirm)
            return;

        var deleteResult = await VersioningService.DeleteApplication(app.Id);
        if (deleteResult.IsSuccess)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            ErrorNotify(deleteResult.ErrorData?.Description);
        }
    }

    private async Task DeleteAppVersionButtonClick(DeleteAppVersion deleteAppVersion)
    {
        var confirm = await ConfirmYesNo($"Removing version {deleteAppVersion.Version.Version} of the application {deleteAppVersion.App.Name}");
        if (!confirm)
            return;

        var deleteResult = await VersioningService.DeleteApplicationVersion(deleteAppVersion.Version.Id);
        if (deleteResult.IsSuccess)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            ErrorNotify(deleteResult.ErrorData?.Description);
        }
    }

    private async Task<bool> ConfirmYesNo(string text)
    {
        var dialogResult = await dialogService.Confirm(text, "Are you sure?", new ConfirmOptions()
            {
                OkButtonText = "Yes",
                CancelButtonText = "No",
                ShowClose = false
            });
        if (!dialogResult ?? false)
            return false;
        return true;
    }

    private void ErrorNotify(string? error, int duration = 3000)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Detail = error ?? "NO_ERROR_FIX_ME",
                Duration = duration
            });
    }
}