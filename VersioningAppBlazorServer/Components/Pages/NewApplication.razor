@page "/NewApplication"
@rendermode InteractiveServer

@inject IVersioningService VersioningService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<PageBody>
    <Body>
        <RadzenTemplateForm TItem="ApplicationDTO" Visible="@(NewApplicationToCreate != null)"
                            Data=@NewApplicationToCreate Submit=@(async (ApplicationDTO args) => { await AddButtonClick(args); })>
            <RadzenStack Orientation="Orientation.Vertical"
                         JustifyContent="JustifyContent.Normal">

                <h3>Add new application</h3>
                <RadzenRow AlignItems="AlignItems.Normal"
                           JustifyContent="JustifyContent.Left">
                    <RadzenColumn Size="12" SizeMD="8" SizeLG="4">
                        <RadzenCard>
                            <RadzenStack Orientation="Orientation.Vertical"
                                         JustifyContent="JustifyContent.Normal">
                                <RadzenLabel Text="(Uppercase, min 3, max 30, allowed special chars space, _ )" />
                                <RadzenFormField @onclick="() => FocusInputAddOrEdit(AppNameRadzenTextBox)"
                                                 Text="Name" Variant="Variant.Outlined" Class="rz-color-base-500">
                                    <RadzenTextBox @ref="AppNameRadzenTextBox" @bind-Value="NewApplicationToCreate!.Name" Name="AppName" />
                                </RadzenFormField>
                                <RadzenRequiredValidator Component="AppName" Text="Enter the name" Popup=false Style="" />
                                <RadzenRegexValidator Component="AppName" Text="Enter a valid name" Pattern="@ValidationRegex.APP_NAME_REGEX" Popup=false Style="" />
                            </RadzenStack>
                        </RadzenCard>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeLG="6" SizeXL="4">
                        <RadzenCard>
                            <RadzenStack Orientation="Orientation.Vertical"
                                         JustifyContent="JustifyContent.Normal">
                                <RadzenLabel Text="Short description of the application" />
                                <RadzenFormField Text="Description" Variant="Variant.Outlined" Class="rz-color-base-500">
                                    <RadzenTextArea @bind-Value=@NewApplicationToCreate!.Description
                                                    @oninput="@(args => NewApplicationToCreate!.Description = $"{args.Value}")"
                                                    Name="AppDescription"
                                                    MaxLength="@maxLength" Style="width: 100%" aria-label="application note here" />

                                </RadzenFormField>
                                <span style="font-style: italic;">@($"{NewApplicationToCreate!.Description.Length}/{maxLength}")</span>
                                <RadzenRequiredValidator Component="AppDescription" Text="Enter the description" Popup=false Style="" />
                            </RadzenStack>
                        </RadzenCard>
                    </RadzenColumn>
                </RadzenRow>

                <RadzenRow>
                    <RadzenCheckBox @bind-Value=@IncludeVersion Name="AddVersionCheckBox" TValue="bool" />
                    <RadzenLabel Text="Add Version" Component="AddVersionCheckBox" class="rz-ms-2" />
                </RadzenRow>
                @if (IncludeVersion)
                {
                    <VersioningAppBlazorServer.Components.VersioningComp.NewVersion Applications="Applications"
                                                                                    MinMajor="1"
                                                                                    MinMinor="0"
                                                                                    MinPatch="0"
                                                                                    @ref=NewVersionComp />
                }

                <RadzenColumn>
                    <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary">
                        Add
                    </RadzenButton>
                </RadzenColumn>
            </RadzenStack>
        </RadzenTemplateForm>
    </Body>
</PageBody>

@code {
    VersioningAppBlazorServer.Components.VersioningComp.NewVersion? NewVersionComp { get; set; }

    private IList<ApplicationDTO> Applications { get; set; } = [];

    private ApplicationDTO NewApplicationToCreate { get; set; } = new();

    private const int maxLength = 200;

    private RadzenTextBox AppNameRadzenTextBox { get; set; } = new();

    public bool IncludeVersion { get; set; } = false;

    protected async Task AddButtonClick(ApplicationDTO args)
    {
        try
        {
            var NewAppVersion = NewVersionComp?.GetVersionDTO();
            if (NewAppVersion != null)
            {
                NewApplicationToCreate.Versions.Add(NewAppVersion);
            }

            var newApplication = await VersioningService.AddNewApplication(NewApplicationToCreate);
            if (newApplication.IsSuccess)
            {
                if (newApplication.Value.Value > 0)
                    Navigation.NavigateTo($"AppVersionView/{newApplication.Value.Key}/{newApplication.Value.Value}");
                else
                {
                    SuccessNotify($"Successfully created application {NewApplicationToCreate.Name}!");
                    Navigation.NavigateTo($"AppVersionsView");
                }
            }
            else
                ErrorNotify(newApplication.ErrorData?.Description);

            NewApplicationToCreate = new();

            //StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorNotify(ex.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Applications.Clear();

        var apps = await VersioningService.GetAllApplications();
        if (apps.IsSuccess)
            Applications = apps.Value?.ToList() ?? [];
        else
            ErrorNotify(apps.ErrorData?.Description);

        Applications = Applications.Where(x => x.Versions.Count > 0).ToList().ConvertAll(Copies.Copy);

        await base.OnInitializedAsync();
    }

    private void ErrorNotify(string? error)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Detail = error ?? "NO_ERROR_FIX_ME",
                Duration = 3000
            });
    }

    private void SuccessNotify(string msg)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Detail = msg,
                Duration = 3000
            });
    }

    private void FocusInputAddOrEdit(RadzenTextBox input)
    {
        input.Element.FocusAsync();
    }
}