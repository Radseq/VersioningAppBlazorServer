@using VersioningAppBlazorServer.Models
@using VersioningAppBlazorServer.Utils

@page "/NewApplication"
@rendermode InteractiveServer

@inject IVersioningService VersioningService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<PageBody>
    <Body>
        <RadzenStack Orientation="Orientation.Vertical"
                     JustifyContent="JustifyContent.Normal" Gap="0.5rem">

            <h3>Add Application</h3>

            <RadzenColumn>
                <RadzenTextBox Placeholder="Enter application name" Change=@(args => OnNewApplicationNameChange(args)) Name="NewApplicationTextBox" />
            </RadzenColumn>

            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="12" SizeLG="5">
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Short application description, 200 characters</RadzenText>
                        <RadzenTextArea @bind-Value=@NewApplicationToCreate.Description @oninput="@(args => NewApplicationToCreate.Description = $"{args.Value}")" MaxLength="@maxLength" Style="width: 100%" aria-label="application note here" />
                        <span style="font-style: italic;">@($"{NewApplicationToCreate.Description.Length}/{maxLength}")</span>
                    </RadzenCard>
                </RadzenColumn>
            </RadzenRow>

            <VersioningAppBlazorServer.Components.VersioningComp.VersionNumeric MajorMin="1"
                                                                                MinorMin="0"
                                                                                PatchMin="0"
                                                                                OnNumericMajorSet="@HandleMajorVersionChange"
                                                                                OnNumericMinorSet="@HandleMinorVersionChange"
                                                                                OnNumericPatchSet="@HandlePatchVersionChange" />

            <VersioningAppBlazorServer.Components.VersioningComp.AppsToPick ApplicationsToPickUp="@ApplicationsToPickUp"
                                                                            OnSelectAppToPickUp="(args)=>OnSelectAppToPickUp(args.Application, args.VersionId)" />
            <VersioningAppBlazorServer.Components.VersioningComp.AppsPicked ApplicationsPicked="@ApplicationsPicked"
                                                                            OnDeleteAppPicked="@OnDeleteAppPicked" />
            <RadzenColumn>
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Add" Variant="Variant.Flat" Click="@AddButtonClick" />
            </RadzenColumn>
        </RadzenStack>
    </Body>
</PageBody>

@code {
    private IList<ApplicationDTO> Applications { get; set; } = [];

    private ApplicationDTO NewApplicationToCreate = new();

    public IList<ApplicationDTO> ApplicationsToPickUp { get; set; } = [];

    public IList<ApplicationPicked> ApplicationsPicked { get; set; } = [];

    private const int maxLength = 200;

    private void OnNewApplicationNameChange(string value)
    {
        NewApplicationToCreate.Name = value;
    }

    private void OnSelectAppToPickUp(ApplicationDTO app, int versionId)
    {
        ApplicationsToPickUp.Remove(app);

        var appVersion = app.Versions.FirstOrDefault(x => x.Id == versionId);
        if (appVersion != null)
            ApplicationsPicked.Add(Copys.Copy(app, appVersion));

        StateHasChanged();
    }

    private void OnDeleteAppPicked(ApplicationPicked appPicked)
    {
        ApplicationsPicked.Remove(appPicked);

        var app = Applications.FirstOrDefault(x => x.Id == appPicked.Id);
        if (app != null)
            ApplicationsToPickUp.Add(Copys.Copy(app));

        SortApplicationsToPickUp();
        StateHasChanged();
    }


    protected async Task AddButtonClick(MouseEventArgs args)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(NewApplicationToCreate.Name))
            {
                ErrorNotify("No application name!");
                return;
            }

            if (string.IsNullOrWhiteSpace(NewApplicationToCreate.Description))
            {
                ErrorNotify("No application description!");
                return;
            }

            foreach (var item in ApplicationsPicked)
            {
                NewApplicationToCreate.Versions[0].Compatibilities.Add(new AppCompatibilityDTO()
                    {
                        CompatibleWithVersionId = item.Version.Id
                    });
            }

            var newApplication = await VersioningService.AddNewApplication(NewApplicationToCreate, NewApplicationToCreate.Versions[0],
                NewApplicationToCreate.Versions[0].Compatibilities);
            if (newApplication.IsSuccess)
                Navigation.NavigateTo($"AppVersionView/{newApplication.Value.Key}/{newApplication.Value.Value}");
            else
                ErrorNotify(newApplication.ErrorData?.Description);

            ApplicationsToPickUp = Applications.Where(x => x.Versions.Count > 0).ToList().ConvertAll(Copys.Copy);
            SortApplicationsToPickUp();
            ApplicationsPicked.Clear();
            NewApplicationToCreate = new();
            AddVersion();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorNotify(ex.Message);
        }
    }

    private void SortApplicationsToPickUp()
    {
        foreach (var item in ApplicationsToPickUp)
        {
            item.Versions = item.Versions.OrderByDescending(x => x.Major).ThenByDescending(g => g.Minor).ThenByDescending(r => r.Patch).ToList();
        }
    }

    private void HandleMajorVersionChange(int major)
    {
        NewApplicationToCreate.Versions[0].Major = major;
    }

    private void HandleMinorVersionChange(int minor)
    {
        NewApplicationToCreate.Versions[0].Major = minor;
    }

    private void HandlePatchVersionChange(int patch)
    {
        NewApplicationToCreate.Versions[0].Patch = patch;
    }

    protected override async Task OnInitializedAsync()
    {
        AddVersion();

        var apps = await VersioningService.GetAllApplications();
        if (apps.IsSuccess)
            Applications = apps.Value ?? [];
        else
            ErrorNotify(apps.ErrorData?.Description);

        ApplicationsToPickUp = Applications.Where(x => x.Versions.Count > 0).ToList().ConvertAll(Copys.Copy);
        SortApplicationsToPickUp();

        await base.OnInitializedAsync();
    }

    private void AddVersion()
    {
        NewApplicationToCreate.Versions.Add(new AppVersionDTO()
            {
                Compatibilities = [],
                AppId = NewApplicationToCreate.Id,
                Major = 1,
                Minor = 0,
                Patch = 0
            });
    }

    private void ErrorNotify(string? error)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Detail = error ?? "NO_ERROR_FIX_ME",
                Duration = 3000
            });
    }
}