@using VersioningAppBlazorServer.Models
@using VersioningAppBlazorServer.Models.UI
@using VersioningAppBlazorServer.Utils

@page "/AddNewCompatibility"

@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject IVersioningService VersioningService
@inject NotificationService NotificationService

<PageBody>
    <Body>

        <RadzenStack Orientation="Orientation.Vertical"
                     JustifyContent="JustifyContent.Normal" Gap="0.5rem" class="">

            <h3>Add New Compatibility</h3>

            <RadzenLabel Text="Select Application" Component="DropDownSelectApp" />
            <RadzenDropDown @bind-Value=@selectedAppIdDummy Change="@(args => OnChangeApp(args))" Data=@ApplicationNames
                            TextProperty="@nameof(DropDownItem.Value)"
                            ValueProperty="@nameof(DropDownItem.Id)" Style="width: 100%; max-width: 400px;" Name="DropDownSelectApp" />


            @if (selectedApp != null)
            {
                <RadzenLabel Text="Select Version" Component="DropDownBindValue2" />
                <RadzenDropDown @bind-Value=@selectedAppVersionId Change="@(args => OnChangeAppVersion(args))"
                                Data=@selectedApp?.Versions
                                TextProperty="@nameof(AppVersionDTO.Version)" ValueProperty="@nameof(AppVersionDTO.Id)"
                                Style="width: 100%; max-width: 400px;" Name="DropDownBindValue2" />
            }

            <VersioningAppBlazorServer.Components.VersioningComp.AppsToPick ApplicationsToPickUp="@ApplicationsToPickUp"
                                                                            OnSelectAppToPickUp="(args)=>OnSelectAppToPickUp(args.Application, args.VersionId)" />
            <VersioningAppBlazorServer.Components.VersioningComp.AppsPicked ApplicationsPicked="@ApplicationsPicked"
                                                                            OnDeleteAppPicked="@OnDeleteAppPicked" />

            @if (selectedApp != null)
            {
                <RadzenColumn>
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Add" Variant="Variant.Flat" Click="@AddButtonClick" />
                </RadzenColumn>
            }
        </RadzenStack>
    </Body>
</PageBody>

@code {
    private List<DropDownItem> ApplicationNames = [];
    private IList<ApplicationDTO> Applications { get; set; } = [];


    private ApplicationDTO? selectedApp;
    private int? selectedAppIdDummy;

    private AppVersionDTO? selectedAppVersion;
    private int? selectedAppVersionId;

    private List<AppCompatibilityDTO> NewAppCompatibilities { get; set; } = [];

    public IList<ApplicationDTO> ApplicationsToPickUp { get; set; } = [];

    public IList<ApplicationPicked> ApplicationsPicked { get; set; } = [];

    private async Task OnChangeAppVersion(object value)
    {
        if (value is int versionId && selectedApp != null)
        {
            var version = await VersioningService.GetAppVersion(versionId);
            if (version.HasFailed)
            {
                ErrorNotify(version.ErrorData?.Description);
                return;
            }

            await GenerateAppToPickUp(selectedApp.Id, versionId);

            selectedAppVersion = version.Value;
            selectedAppVersionId = versionId;

            SortApplicationsToPickUp();
            StateHasChanged();
        }
    }

    private async Task GenerateAppToPickUp(int appId, int versionId)
    {
        var versionCompatibilities = await VersioningService.GetVersionCompatibilities(versionId);
        if (versionCompatibilities.IsSuccess)
        {
            var toSkipVersionsIds = versionCompatibilities.Value?.Select(x => x.CompatibleWithVersionId);
            foreach (var app in Applications)
            {
                if (app.Id == appId)
                    continue;

                var newAppToPickUp = Copys.Copy(app);
                List<AppVersionDTO> Versions = [];
                foreach (var appVersion in app.Versions)
                {
                    if (toSkipVersionsIds?.Contains(appVersion.Id) == false)
                    {
                        Versions.Add(Copys.Copy(appVersion));
                    }
                }
                newAppToPickUp.Versions = Versions;
                if (newAppToPickUp.Versions.Count == 0)
                    continue;
                ApplicationsToPickUp.Add(newAppToPickUp);
            }
        }
    }

    private void OnSelectAppToPickUp(ApplicationDTO app, int versionId)
    {
        ApplicationsToPickUp.Remove(app);

        var appVersion = app.Versions.FirstOrDefault(x => x.Id == versionId);
        if (appVersion != null)
            ApplicationsPicked.Add(Copys.Copy(app, appVersion));

        StateHasChanged();
    }

    private void OnDeleteAppPicked(ApplicationPicked appPicked)
    {
        ApplicationsPicked.Remove(appPicked);

        var app = Applications.FirstOrDefault(x => x.Id == appPicked.Id);
        if (app != null)
            ApplicationsToPickUp.Add(Copys.Copy(app));

        SortApplicationsToPickUp();

        StateHasChanged();
    }

    private async Task OnChangeApp(object value)
    {
        if (value is int appId)
        {
            var app = await VersioningService.GetApplicationById(appId);
            if (app.IsSuccess)
                selectedApp = app.Value;
            else
                ErrorNotify(app.ErrorData?.Description);

            //StateHasChanged();
        }
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        try
        {
            if (selectedAppVersion == null || selectedApp == null)
                return;

            foreach (var item in ApplicationsPicked)
            {
                NewAppCompatibilities.Add(new AppCompatibilityDTO()
                    {
                        CompatibleWithVersionId = item.Version.Id,
                        VersionId = selectedAppVersion.Id
                    });
            }
            ApplicationsToPickUp.Clear();
            ApplicationsPicked.Clear();

            var newVersionResult = await VersioningService.AddNewVersionCompatibilities(selectedAppVersion.Id, NewAppCompatibilities);
            if (newVersionResult.IsSuccess)
            {
                Navigation.NavigateTo($"AppVersionView/{selectedApp.Id}/{selectedAppVersion.Id}");
            }
            else
            {
                ErrorNotify(newVersionResult.ErrorData?.Description);
                NewAppCompatibilities = [];
                selectedApp = null;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ErrorNotify(ex.Message);
        }
    }

    private void SortApplicationsToPickUp()
    {
        foreach (var item in ApplicationsToPickUp)
        {
            item.Versions = item.Versions.OrderByDescending(x => x.Major).ThenByDescending(g => g.Minor).ThenByDescending(r => r.Patch).ToList();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var allAppsNamesResult = await VersioningService.GetAllApplicationsNames();
        if (allAppsNamesResult.IsSuccess)
            ApplicationNames = allAppsNamesResult.Value ?? [];
        else
            ErrorNotify(allAppsNamesResult.ErrorData?.Description);

        var apps = await VersioningService.GetAllApplications();
        if (apps.IsSuccess)
            Applications = apps.Value ?? [];
        else
            ErrorNotify(apps.ErrorData?.Description);

        await base.OnInitializedAsync();
    }

    private void ErrorNotify(string? error)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Detail = error ?? "NO_ERROR_FIX_ME",
                Duration = 3000
            });
    }
}